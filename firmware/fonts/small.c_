#include <avr/pgmspace.h>
#include "common.h"

static const PROGMEM uint8_t  glyphs[] = { 
// 0
3,
0b111,
0b101,
0b101,
0b101,
0b111,
0b000,
0b000,
0b000,
// 1
3,
0b010,
0b010,
0b010,
0b010,
0b010,
0b000,
0b000,
0b000,
// 2
3,
0b111,
0b001,
0b111,
0b100,
0b111,
0b000,
0b000,
0b000,
// 3
3,
0b111,
0b001,
0b111,
0b001,
0b111,
0b000,
0b000,
0b000,
// 4
3,
0b101,
0b101,
0b111,
0b001,
0b001,
0b000,
0b000,
0b000,
// 5
3,
0b111,
0b100,
0b111,
0b001,
0b111,
0b000,
0b000,
0b000,
// 6
3,
0b111,
0b100,
0b111,
0b101,
0b111,
0b000,
0b000,
0b000,
// 7
3,
0b111,
0b101,
0b001,
0b001,
0b001,
0b000,
0b000,
0b000,
// 8
3,
0b111,
0b101,
0b111,
0b101,
0b111,
0b000,
0b000,
0b000,
// 9
3,
0b111,
0b101,
0b111,
0b001,
0b111,
0b000,
0b000,
0b000,


// A
3,
0b010,
0b101,
0b111,
0b101,
0b101,
0b000,
0b000,
0b000,

// B
3,
0b110,
0b101,
0b110,
0b101,
0b110,
0b000,
0b000,
0b000,

// C
3,
0b011,
0b100,
0b100,
0b100,
0b011,
0b000,
0b000,
0b000,

// D
3,
0b110,
0b101,
0b101,
0b101,
0b110,
0b000,
0b000,
0b000,

// E
3,
0b111,
0b100,
0b111,
0b100,
0b111,
0b000,
0b000,
0b000,

// F
3,
0b111,
0b100,
0b111,
0b100,
0b100,
0b000,
0b000,
0b000,

// G
4,
0b0110,
0b1000,
0b1011,
0b1001,
0b0110,
0b0000,
0b0000,
0b0000,

// H
3,
0b101,
0b101,
0b111,
0b101,
0b101,
0b000,
0b000,
0b000,

// I
1,
0b1,
0b1,
0b1,
0b1,
0b1,
0b0,
0b0,
0b0,

// J
3,
0b001,
0b001,
0b001,
0b101,
0b010,
0b000,
0b000,
0b000,

// K
4,
0b1001,
0b1010,
0b1100,
0b1010,
0b1001,
0b0000,
0b0000,
0b0000,

// L
3,
0b100,
0b100,
0b100,
0b100,
0b111,
0b000,
0b000,
0b000,

// M
5,
0b10001,
0b11011,
0b10101,
0b10001,
0b10001,
0b00000,
0b00000,
0b00000,

// N
4,
0b1001,
0b1101,
0b1011,
0b1001,
0b1001,
0b0000,
0b0000,
0b0000,

// O
3,
0b010,
0b101,
0b101,
0b101,
0b010,
0b000,
0b000,
0b000,

// P
3,
0b110,
0b101,
0b110,
0b100,
0b100,
0b000,
0b000,
0b000,

// Q
3,
0b0110,
0b1001,
0b1001,
0b1010,
0b0101,
0b0000,
0b0000,
0b0000,

// R
3,
0b110,
0b101,
0b110,
0b101,
0b101,
0b000,
0b000,
0b000,

// S
3,
0b011,
0b100,
0b010,
0b001,
0b110,
0b000,
0b000,
0b000,

// T
3,
0b111,
0b010,
0b010,
0b010,
0b010,
0b000,
0b000,
0b000,

// U
3,
0b101,
0b101,
0b101,
0b101,
0b010,
0b000,
0b000,
0b000,

// V
4,
0b1001,
0b1001,
0b1010,
0b1100,
0b1000,
0b0000,
0b0000,
0b0000,

// W
5,
0b10001,
0b10001,
0b10101,
0b11011,
0b10001,
0b00000,
0b00000,
0b00000,

// X
5,
0b10001,
0b01010,
0b00100,
0b01010,
0b10001,
0b00000,
0b00000,
0b00000,

// Y
3,
0b101,
0b101,
0b010,
0b010,
0b010,
0b000,
0b000,
0b000,

// Z
5,
0b11111,
0b00010,
0b00100,
0b01000,
0b11111,
0b00000,
0b00000,
0b00000,



// \x01 (アンテナ記号40k)
7,
0b1111111,
0b0101010,
0b0011100,
0b0001000,
0b0001000,
0b0000000,
0b0000000,
0b0000000,

// \x02 (アンテナ記号60k)
7,
0b1111111,
0b0111110,
0b0011100,
0b0001000,
0b0001000,
0b0000000,
0b0000000,
0b0000000,

// \x03 (アンテナレベル1)
4,
0b0000,
0b0000,
0b0000,
0b0000,
0b1000,
0b0000,
0b0000,
0b0000,
// \x04 (アンテナレベル2)
4,
0b0000,
0b0000,
0b0000,
0b0100,
0b1100,
0b0000,
0b0000,
0b0000,
// \x05 (アンテナレベル3)
4,
0b0000,
0b0000,
0b0010,
0b0110,
0b1110,
0b0000,
0b0000,
0b0000,
// \x06 (アンテナレベル4)
4,
0b0000,
0b0001,
0b0011,
0b0111,
0b1111,
0b0000,
0b0000,
0b0000,

// \x08 (small M)
5,
0b11111,
0b10101,
0b10101,
0b00000,
0b00000,
0b00000,
0b00000,
0b00000,

// \x09 (small 0)
3,
0b111,
0b101,
0b111,
0b000,
0b000,
0b000,
0b000,
0b000,

// \x0a (small 1)
1,
0b1,
0b1,
0b1,
0b0,
0b0,
0b0,
0b0,
0b0,

// \x0b (small -)
2,
0b00,
0b11,
0b00,
0b00,
0b00,
0b00,
0b00,
0b00,


// %
4,
0b0000,
0b1001,
0b0010,
0b0100,
0b1001,
0b0000,
0b0000,
0b0000,

// :
1,
0b0,
0b1,
0b0,
0b1,
0b0,
0b0,
0b0,
0b0,

// \x0d (ハートマーク)
7,
0b0110110,
0b1111111,
0b1111111,
0b0111110,
0b0011100,
0b0001000,
0b0000000,
0b0000000,



};

char glyph_small(char ch, glyph_descriptor * glyph)
{
	char idx = -1;
	glyph->height = 8;
	glyph->flags = 0;
	if(ch == ' ')
	{
		glyph->width = 3;
		glyph->ascent = 4;
		glyph->pattern = 0;
		return 1;
	}

	if(ch >= '0' && ch <= '9')
		idx = ch - '0';
	else if(ch >= 'A' && ch <= 'Z')
		idx = ch - 'A' + 10;
	else if(ch == 0x01)
		idx = 10 + 26;
	else if(ch == 0x02)
		idx = 11 + 26;
	else if(ch >= 0x03 && ch <= 0x06)
		idx = ch - 0x03 + 11+26+1;
	else if(ch >= 0x08 && ch <= 0x0b)
		idx = ch - 0x08 + 11+26+5;
	else if(ch == '%')
		idx = 46;
	else if(ch == ':')
		idx = 47;
	else if(ch == 0x0d)
		idx = 48;

	if(idx == -1) return 0;

	const uint8_t * PROGMEM p = glyphs + (uint8_t)idx * 9;
	glyph->width = pgm_read_byte(p);
	glyph->ascent = glyph->width + 1;
	glyph->pattern = p + 1;
	return 1;
}

